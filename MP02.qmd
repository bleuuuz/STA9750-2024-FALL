---
title: "Creating the Statistically Correct Movie"
author: Elijah Yong
editor: visual
---

### Introduction:

In a world inundated with cinematic mediocrity, we've become accustomed to the dreaded sequel. A once-promising franchise, often reduced to a shadow of its former self, plagued by plot holes, uninspired performances, and a seemingly endless pursuit of box office dollars. This is a tragedy that has befallen my favorite franchise, the Star Wars Universe.

What was once a beautifully constructed story was turned upside down in the hands of Disney when they released the subpar Force Awakens trilogy. Although it has been nine years since then, it still comes to haunt me every May 4th.

To help myself cope with my Star Wars-induced depression, I wanted to create a model to measure the success of the franchise's old films compared to some of the long-time greats and see if they deserved a spot in the hall of fame.

### Loading our Packages:

Now before we start, it's time to set up our environment with a few packages to help us manipulate our data later.

```{r warning=FALSE,message=FALSE}
library(tidyverse)
library(DT)
library(tidyr)
library(data.table)
library(ggplot2)
library(plotly)
```

For our ultimate metric, we have to look through history to see what movies and shows performed the best. To do this, I used the following code to pull a smaller subsection of data from IMDB (so that my computer won't melt down) with the following code.

### Loading Data:

```{r message=FALSE}

#This code is a workaround way to load in our datasets
NAME_BASICS <- suppressWarnings(readr::read_csv("name_basics_small.csv.zip"))
TITLE_BASICS <- suppressWarnings(readr::read_csv("title_basics_small.csv.zip"))
TITLE_CREW <- suppressWarnings(readr::read_csv("title_crew_small.csv.zip"))
TITLE_EPISODES <- suppressWarnings(readr::read_csv("title_episodes_small.csv.zip"))
TITLE_PRINCIPALS <- suppressWarnings(readr::read_csv("title_principals_small.csv.zip"))
TITLE_RATINGS <- suppressWarnings(readr::read_csv("title_ratings_small.csv.zip"))
```

```{r}
#| code-fold: true
#Issue with code loading data from prof website
#get_imdb_file <- function(fname){
#    BASE_URL <- "https://github.com/michaelweylandt/STA9750/tree/main/miniprojects/mini02_preprocessed/"
#    fname_ext <- paste0(fname, ".csv.zip")
#    if(!file.exists(fname_ext)){
#        FILE_URL <- paste0(BASE_URL, fname_ext)
#        download.file(FILE_URL, 
#                      destfile = fname_ext)
#    }
#    as.data.frame(readr::read_tsv(fname_ext, lazy=FALSE))
#}

#NAME_BASICS      <- get_imdb_file("name_basics_small")
#TITLE_BASICS     <- get_imdb_file("title_basics_small")
#TITLE_EPISODES   <- get_imdb_file("title_episodes_small")
#TITLE_RATINGS    <- get_imdb_file("title_ratings_small")
#TITLE_CREW       <- get_imdb_file("title_crew_small")
#TITLE_PRINCIPALS <- get_imdb_file("title_principals_small")
```

------------------------------------------------------------------------

### **Trimming and Correcting Data Sets**

Hm... Although we've already selected a filtered subset of IMDB data, our NAME_BASICS data set still seems too large and is slowing our program down. To fix this, we can whittle it down even further by removing people who are known for less than two productions in our NAME_BASICS dataset.

```{r message=FALSE}
NAME_BASICS <- NAME_BASICS |> 
  filter(str_count(knownForTitles, ",") > 1)
```

Sweet! Now that our sets are a little smaller, let's take a look at the distribution of ratings for the media we have left over.

```{r message=FALSE}
#| code-fold: true

#code to create plot
TITLE_RATINGS |>
  ggplot(aes(x=numVotes)) + 
  geom_histogram(bins=30) +
  xlab("Number of IMDB Ratings") + 
  ylab("Number of Titles") + 
  ggtitle("IMDB Titles and Rating Distributions") + 
  theme_bw() + 
  scale_x_log10(label=scales::comma) + 
  scale_y_continuous(label=scales::comma)



```

```{r}
TITLE_RATINGS |>
  pull(numVotes) |>
  quantile()
```

It seems like our data is heavily skewed right although our pre-filtered data set has already removed many of the movies/shows with under 100 ratings. Just in case, let's run our filter again to be sure.

```{r message=FALSE}
TITLE_RATINGS <- TITLE_RATINGS |>
  filter(numVotes >= 100)
```

```{r message=FALSE}
#| code-fold: true
#Code to join & create new tables
TITLE_BASICS <- TITLE_BASICS |>
  semi_join(TITLE_RATINGS, 
            join_by(tconst == tconst))

TITLE_CREW <- TITLE_CREW |>
  semi_join(TITLE_RATINGS, 
            join_by(tconst == tconst))

TITLE_EPISODES_1 <- TITLE_EPISODES |>
  semi_join(TITLE_RATINGS, 
            join_by(tconst == tconst))
TITLE_EPISODES_2 <- TITLE_EPISODES |>
  semi_join(TITLE_RATINGS, 
            join_by(parentTconst == tconst))

TITLE_EPISODES <- bind_rows(TITLE_EPISODES_1,
                            TITLE_EPISODES_2) |>
  distinct()

TITLE_PRINCIPALS <- TITLE_PRINCIPALS |>
  semi_join(TITLE_RATINGS, join_by(tconst == tconst))


rm(TITLE_EPISODES_1)
rm(TITLE_EPISODES_2)
```

Now that we've cut down our data set to a more manageable size, it's important to make sure that all our column types are correct so we can work with our data. We can take a look at our data sets with the glimpse function.

```{r message=FALSE}
glimpse(TITLE_BASICS)


```

As we can see, a few of our column types aren't correct. For example, we want 'start year', 'end year', and 'run time minutes' to be numeric values and our 'adult rating' to be a logical value. To fix this, we can mutate the Title Basics data set to change those values...

```{r warning=FALSE,message=FALSE}
TITLE_BASICS <- TITLE_BASICS |>
  mutate(
    startYear = as.numeric(startYear),
    endYear = as.numeric(endYear),
    runtimeMinutes = as.numeric(runtimeMinutes),
    isAdult = as.logical(isAdult)
)
```

(I also took the liberty to correct the rest of our sets if you'd like to take a look.)

```{r warning=FALSE,message=FALSE,echo=FALSE}
#| code-fold: true

glimpse(NAME_BASICS)

NAME_BASICS <- NAME_BASICS |>
  mutate(birthYear = as.numeric(birthYear),
         deathYear = as.numeric(deathYear))

glimpse(TITLE_CREW)

glimpse(TITLE_EPISODES)
  
    TITLE_EPISODES <- TITLE_EPISODES |>
      mutate(
        seasonNumber = as.numeric(seasonNumber),
        episodeNumber = as.numeric(episodeNumber)
      )
    
glimpse(TITLE_PRINCIPALS)
glimpse(TITLE_RATINGS)

NAME_BASICS |> separate_longer_delim(knownForTitles, ",") |> slice_head(n=10)


```

Now that our data is ready to be manipulated, we can try some exercises on it.

### Exercises:

**2.0 : How many movies are in our dataset?** (For this case we'll just use movies and not TVmovies)

```{r message=FALSE}
#We can sort our TITLE_BASICS dataset by filtering title type to movie and counting how many rows exist
totalmovies <- TITLE_BASICS |>
  filter(TITLE_BASICS$titleType=="movie")
  nrow(totalmovies)
```

**How many TV Series?**

```{r message=FALSE}
#We can sort our TITLE_BASICS dataset by filtering title type to TVseries and counting how many rows exist
total_TV_Series <- TITLE_BASICS |>
  filter(TITLE_BASICS$titleType=="tvSeries")
  nrow(total_TV_Series)
```

**How many episodes?**

```{r message=FALSE}
#We can sort our TITLE_BASICS dataset by filtering title type to episodes and counting how many rows exist
total_TV_Episodes <- TITLE_BASICS |> 
  filter(TITLE_BASICS$titleType=="tvEpisode") 
  nrow(total_TV_Episodes)
```

Sweet! It seems like we have way more movies than TV series which makes sense. What about the rest of the media types?

```{r message=FALSE}
#| code-fold: true
#This code counts the quantity of each title type

title_counts <- TITLE_BASICS |>
    count(titleType)

#This code creates a bar chart using Media type as an x axis and quantity in our dataset as a y axis

ggplot(title_counts, aes(x = titleType, y = n)) +
  geom_bar(stat = "identity") +
  labs(title = "Quantity of Media Types", x = "Title Type", y = "Quantity") +
  theme_bw()
```

Well to no surprise, it seems as though movies and TV series dwarf the rest.

**2.2: How about if we try to find out who the oldest production crew member is that is still alive?**

```{r message=FALSE}
#| code-fold: true
#We can filter out NA death years meaning the the actor is still alive, NA birthyears to filter out missing data, and for birthyears greater than 1908 which is the oldest person alive right now! 
oldestcrew <- NAME_BASICS |>
  filter(is.na(NAME_BASICS$deathYear), !is.na(NAME_BASICS$birthYear), birthYear >= 1934) |>
  arrange(desc(birthYear)) |>
  tail(1)  

print(oldestcrew)
```

Wow! Kurt Breucker is still hanging in there at 90 years old!

**2.3: How about finding the perfect 10/10 rating show with over 200,000 votes?**

```{r message=FALSE}
#To find our perfect episode we are filtering for episodes that have an average rating of 10 and have over 200,000 ratings. 
perfect_episode <- TITLE_RATINGS |>
  filter(TITLE_RATINGS$averageRating == 10, TITLE_RATINGS$numVotes >= 200000) |>
  inner_join(TITLE_BASICS, by = "tconst") |> #Joins our ratings and basics datasets
  head(1) 
print(perfect_episode$primaryTitle)
```

To be honest I have zero clue what this show is but perhaps I might give it a watch after discovering its rating!

**2.4: How about Mark Hamill's top four projects?** (If you don't know... he plays Luke Skywalker in the Star wars original and sequel trilogies!)

```{r message=FALSE}
#| code-fold: true
#We can create a variable for solely Mark Hamills projects
mark_hamill <- NAME_BASICS |>
  filter(primaryName == "Mark Hamill") |>
  separate_longer_delim(knownForTitles, ",") |> #seperates Knownfortitles by ,
  select(knownForTitles)

#Join together our Mark Hamill set with Title_Basics to get titles
top4markhamill <- mark_hamill |>
  left_join(
    TITLE_BASICS,
    join_by(knownForTitles == tconst)
  ) |>
  select(primaryTitle)

#Create a datatable from our joint datasets
datatable(top4markhamill,
          colnames = c("Project Name"),
          caption = "Mark Hamill's Top Projects"
)
```

**2.5: Or what TV series with more than 12 episodes has the highest average rating?**

```{r message=FALSE}
#| code-fold: true

#Code to filter for tvSeries with more than 12 episodes
tvseries12episodes <- TITLE_BASICS |>
  filter(titleType == "tvSeries") |>  
  left_join(TITLE_EPISODES, 
            join_by(tconst == parentTconst)) |>  
  group_by(tconst, primaryTitle) |>  
  summarise(total_episodes = n()) |> 
  filter(total_episodes > 12)

#code to join episodes with ratings
besttvseries12episodes <- tvseries12episodes |>
  left_join(
    TITLE_RATINGS,
    join_by(tconst == tconst)
  ) |> 
  ungroup() |>
  arrange(desc(averageRating)) |>
  select( primaryTitle, averageRating) |>
  slice_head(n=10)
head(besttvseries12episodes,1)
```

**2.6: And lastly... is it true that episodes from later seasons of Happy Days have lower average ratings than the earlier seasons after their "Jump the shark" scene?**

```{r message=FALSE}
#| code-fold: true
#We filter out title basics for happy days to isolate and use tconst in join
jumptheshark <- TITLE_BASICS |>
  filter(primaryTitle == "Happy Days")
#This code joins our title episodes and ratings
jumpthesharkimpact <- TITLE_EPISODES |>
  filter(parentTconst %in% jumptheshark$tconst) |>
  inner_join(TITLE_RATINGS, by = "tconst") |>
  group_by(seasonNumber) |>
  summarise(avg_rating = mean(averageRating)) |>
  arrange(seasonNumber)
#This code creates a visualization of average rating over seasons
ggplot(jumpthesharkimpact, aes(x = seasonNumber, y = avg_rating)) +
  geom_line(color = "black") + 
  geom_point(color = "black") +
  labs(
    title = "Ratings of Happy Days by Season",
    x = "Season Number",
    y = "Average IMDB Rating"
  ) 
```

According to our visualization, it seems like ratings plummeted throughout the next two seasons after the "Jump the shark" episode but recovered from seasons 8-11. Despite recovering in later seasons, the earlier seasons of the show on average have higher ratings.

### Creating a Success Metric:

As I looked through the IMBD data sets, it made sense that the TITLE_RATINGS data set would contain the best measurable variables like average rating and number of votes.

Based upon this, I decided to create the following success metric:

-   **Success Metric = (Average rating \* log(Number of Votes))**

This metric is a weighted score that gives more weight to movies with both high ratings and a large number of votes while also reducing the heavy right skew of our data set using a logorithmic function.

**Testing the Metric**

**3.1: Choose the top 5-10 movies on your metric and confirm that they were indeed box office successes.**

```{r message=FALSE}
#| code-fold: true

#This code joins together Ratings and Title Basics to create a dataset with names and success scores
moviesuccess <- TITLE_RATINGS |>
  left_join(TITLE_BASICS, by = "tconst") |>
  filter(titleType == "movie") |>
  mutate(success_score = averageRating * log10(numVotes)) |>
  arrange(desc(success_score))

head(moviesuccess %>% select(primaryTitle,averageRating,numVotes, success_score), 5)

```

Based upon this test, I would say that our weighted success metric proves effective as all of these movies fall within the top 13 movies of all time on IMDB and were box office successes.

**3.2: Choose 3-5 movies with large numbers of IMDb votes that score poorly on your success metric and confirm that they are indeed of low quality.**

```{r  message=FALSE}
#| code-fold: true
#We can filter movies with 100k+ votes and arrange based on success score
moviesuccess |>
  filter(numVotes > 100000) |>  
  arrange(success_score) |>  
  head(5) |>  
  select(primaryTitle, averageRating, numVotes, success_score)  
  
```

Based upon this test, I would also say that our weighted success metric proves effective in weighing movies that have bombed based upon large numbers of IMDb votes.

**3.3: Choose a prestige actor or director and confirm that they have many projects with high scores on your success metric.**

```{r message=FALSE}
#| code-fold: true

#This code takes our Hamill data set and joins it with movie success 
mark_hamill_movies <- mark_hamill |>
  left_join(moviesuccess, by = c("knownForTitles" = "tconst"))

#This code arranges our new dataset by success score
mark_hamill_movies |>
  arrange(desc(success_score)) |>
  head(5)|>
  select(primaryTitle, averageRating, numVotes, success_score)

```

Using Mark Hamill's data that we already prepped before, we can join it with our movie success data set to see that his four movies all rank rather high on our metric. (As they should being great Starwars movies!)

**3.4: Perform at least one other form of ‘spot check’ validation.**

What better way to do a spot-check validation than to use our metric against one of the biggest sequel flops of all time, Grease 2.

```{r message=FALSE}
#| code-fold: true

#This code filters out for Grease 2 in primary title
moviesuccess |>
  filter(primaryTitle == "Grease 2") |>
  head(1) |>
  select(primaryTitle, averageRating, numVotes, success_score)
```

As expected, our success score hit almost rock bottom indicating that it is effective at determining low scoring movies.

**3.5: Come up with a numerical threshold for a project to be a ‘success’; that is, determine a value** v **such that movies above** v **are all “solid” or better.**

Since Grease 2 was determined to be a flop by many standards with a success score of 21.13, using a 95% threshold at 29.82 would be reasonable to consider a project to be a success.

```{r message=FALSE}
quantile(moviesuccess$success_score, probs = seq(.9, 1, by = 0.025))
success_value <- 29.82


```

### **Examining Success by Genre and Decade**

**4.1: What was the genre with the most “successes” in each decade?**

To answer this question, we would first need to sort the movies into their respective genres and release dates of movies into decades.

```{r message=FALSE}

#Seperating movies with multiple genres into different lines
movie_genre <- moviesuccess |>
  separate_rows(genres, sep = ",")
  
#filtering out NA values from genres and start years
moviesuccess_separated <- movie_genre |>
  filter(!is.na(genres) & !is.na(startYear)) |> 
  mutate(decade = floor(startYear / 10) * 10) 
 


```

Next we can work on visualizing our new data set to get a clear view of movie preferences over the decades.

```{r message=FALSE}
#| code-fold: true

#This code filters out succesful movies and groups them by decade then genre
 decade_success <- moviesuccess_separated |>
  filter(success_score >= success_value) |>
  group_by(decade, genres) |>
  summarize(
    quantity = n(), 
    .groups = "drop"
  ) |>
  group_by(decade) |>
  slice_max(quantity, n = 10, with_ties = FALSE) |>
  mutate(rank = dense_rank(desc(quantity))) |>
  ungroup() |>
  arrange(decade, rank) 

#This code creates a graph visualization of our data set
decade_success_visual <- ggplot(decade_success, aes(x = decade, y = quantity, color = genres, group = genres)) +
  geom_line(linewidth = .5) + 
  geom_point(size = 1.5) +
  labs(
    title = "Genres Popularity Across Decades",
    x = "Decade",
    y = "Number of Successful Movies",
    color = "Genres"
  ) +
  scale_x_continuous(breaks = seq(min(decade_success$decade), max(decade_success$decade), by = 10)) + 
  theme(
    axis.text.x = element_text(angle = 45, hjust = 1),
    legend.position = "bottom"
  )

ggplotly(decade_success_visual)
```

**4.2: What genre consistently has the most “successes”? What genre used to reliably produce “successes” and has fallen out of favor?**

According to our chart, we can see that the Drama category has consistently outperformed the rest of the genres over the decades while romance seems to have fallen out for favor going from 5th place in the 2000's to nearly last in the 2020's.

**4.3: What genre has produced the most “successes” since 2010? Does it have the highest success *rate* or does it only have a large number of successes because there are many productions in that genre?**

Drama has produced the most successes since 2010 and it does seem to have a large number of successes due to production size rather than a higher success rate. In fact, dramas only have a 6% success rate compared to less popular biographies with a whopping 13%!

```{r message=FALSE}
#| code-fold: true
movie_genre |>
  group_by(genres) |>
  summarize(
    Total_Movies = n(),
    Successes = sum(success_score >= success_value),
    Success_Rate_In_Percent = round(Successes / Total_Movies * 100),
    .groups = "drop"
  ) %>%
  arrange(desc(Success_Rate_In_Percent)) |>
  DT::datatable()
```

**4.4: What genre has become more popular in recent years?**

It seems as though action has been gaining traction in recent years jumping from \~4th most popular in the 90's to \~2nd most popular in the 2020's.

### **Successful Personnel in the Genre**

Based on my analysis, if I were to make a successful movie I would create a biography as they historically have the highest probability of being successful. As a result, I would look to cast an actor and director who specialize in the genre.

```{r}
#| code-fold: true

#Code to filter for movies that fall into the biography genre
moviesuccess_biography <- moviesuccess_separated |>
  filter(genres == "Biography")
  
#Code to join actor names to the movies they are in and sum their success scores
successful_biography_actors <- TITLE_PRINCIPALS |>
  inner_join(moviesuccess_biography, by = "tconst") |>
  filter(category == "actor" | category == "actress") |>
  group_by(nconst) |>
  summarise(
    num_successful_movies = sum(success_score >= success_value),
    avg_success_score = round(mean(success_score, na.rm = TRUE),2),
    .groups = "drop"
  ) |>
  arrange(desc(num_successful_movies)) |>
  head(10)

#code to join names to movies
successful_biography_actors <- successful_biography_actors |>
  inner_join(NAME_BASICS, by = "nconst") |>
  select(primaryName, num_successful_movies, avg_success_score)

successful_biography_actors |>
  DT::datatable(options = list(pageLength = 5))

```

Based on my analysis of our movie data for the top biography actors, I've decided to select Christian Bale and Matthew McConaughey as my actors. Their ability to portray complex, morally ambiguous characters like Patrick Bateman and Mark Hanna demonstrates their suitability for a darker, more twisted biography. Given their history of success in the genre and their ability to convey nuanced emotions, I believe that they would be invaluable assets to a biographical film exploring morally complex figures in a war setting. Along with that, both of these actors fall within the top nine most successful biographical movies as well as the top four in average success score.

```{r}
#| code-fold: true

#Code to filter for movies that fall into the biography genre
moviesuccess_biography <- moviesuccess_separated |>
  filter(genres == "Biography")

  
#Code to join director names to the movies they are in and sum their success scores
successful_biography_directors <- TITLE_PRINCIPALS |>
  inner_join(moviesuccess_biography, by = "tconst") |>
  filter(category == "director") |>
  group_by(nconst) |>
  summarise(
    num_successful_movies = sum(success_score >= success_value),
    avg_success_score = mean(success_score, na.rm = TRUE),
    .groups = "drop"
  ) |>
  arrange(desc(num_successful_movies)) |>
  head(10)

#code to join names to movies
successful_biography_directors <- successful_biography_directors |>
  inner_join(NAME_BASICS, by = "nconst") |>
  select(primaryName, num_successful_movies, avg_success_score)

successful_biography_directors |>
  DT::datatable(options = list(pageLength = 5))
```

In terms of a director, there is no other clear choice to me than Steven Speilberg. Despite falling lower on the list in terms of successful biographical movies, Spielberg represents the cream of the crop in terms of average success score. Steven Spielberg's masterful storytelling and ability to draw exceptional performances from actors would undoubtedly complement the strengths of Matthew McConaughey and Christian Bale. Spielberg's visionary direction and keen eye for detail in works like saving Private Ryan would provide a rich, dark, and immersive world for both these talented actors to inhabit. His ability to elicit powerful emotional performances would allow McConaughey and Bale to fully explore the complexities of their characters, bringing their unique talents to the forefront.

### **Finding a Classic to Remake:**

The movie I want to remake it Schindler's List from 1993. This movie is a historical drama film that tells the true story of Oskar Schindler,a German businessman who saved the lives of hundreds of Jews during the Holocost. Schindlers List has a whopping 9 rating on IMDB with over 1.4mm votes giving a high success score of 55.52 based on our metric. Along with that, this movie was produced over 25 years ago and having Steven Spielberg on board would make it easy to obtain the rights to reproduce it. (As he was the original director of the movie) On the other hand, our legal team would have to reach out to the former key actors like Liam Neeson and Ralph Fiennes regarding rights to the project.

```{r}
moviesuccess_biography |>
  select(primaryTitle, startYear, success_score, numVotes, averageRating) |>
  DT::datatable(options = list(pageLength = 5, order = list(list(3, "desc"))))
```

### **Write and Deliever your Pitch**

**Dramas have reigned supreme in the film industry for decades and has consistently been the best performing genre for the last 100 years.** With over 3400 titles created between 1990 onwards it is no surprise just how effective these movies are at evoking powerful emotions and creating heartfelt stories.

**Steven Spielberg, a visionary director with a proven track record of success,** has a knack for crafting thought-provoking dramas that make people wrap heads around difficult to solve moral dilemmas. His collaboration with **Matthew McConaughey and Christian Bale**, two of Hollywood's most acclaimed actors known for playing morally ambiguous roles, would create a powerful and unforgettable cinematic experience.

**Schindler's List**, a timeless tale of courage, compassion, and the human spirit, is ripe for a modern reimagining. With Spielberg's masterful direction and the exceptional talents of McConaughey and Bale, this film promises to be a powerful exploration of relevant themes.

**This new adaptation will captivate audiences with its compelling narrative, unforgettable performances, and stunning visuals.** It's a must-see film that will leave a lasting impression.
